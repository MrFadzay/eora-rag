"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∫–µ–π—Å–∞–º–∏ EORA
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python seed_database.py                    # –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    python seed_database.py --test            # –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    python seed_database.py --reset           # –û—á–∏—Å—Ç–∫–∞ –∏ –ø–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è
    python seed_database.py --yes             # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                                               # –¥–ª—è –Ω–µ–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
"""
import os
import sys
import argparse
from dotenv import load_dotenv
from vectorstore import EoraVectorStore


def get_data_path():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ –¥–∞–Ω–Ω—ã–º, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –ø—É—Ç–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."""
    default_path = os.path.join(
        os.path.dirname(os.path.dirname(__file__)), 'data'
    )
    return os.getenv('DATA_PATH', default_path)


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    parser = argparse.ArgumentParser(
        description='–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∫–µ–π—Å–∞–º–∏ EORA')
    parser.add_argument('--test', action='store_true',
                        help='–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–º–µ—Å—Ç–æ –ø–æ–ª–Ω—ã—Ö')
    parser.add_argument('--reset', action='store_true',
                        help='–û—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π')
    parser.add_argument('--data-file', type=str,
                        help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –¥–∞–Ω–Ω—ã–º–∏ (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç --test)')
    parser.add_argument('--yes', '-y', action='store_true',
                        help='–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–≤–µ—Ç–∏—Ç—å "–¥–∞" –Ω–∞ –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã')

    args = parser.parse_args()

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    load_dotenv()
    api_key = os.getenv('GEMINI_API_KEY')

    if not api_key:
        print("‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω GEMINI_API_KEY –≤ .env —Ñ–∞–π–ª–µ")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª .env —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Ç—Ä–æ–∫—É:")
        print("GEMINI_API_KEY=your_api_key_here")
        sys.exit(1)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏
    data_dir = get_data_path()
    if args.data_file:
        data_file = args.data_file
    elif args.test:
        data_file = os.path.join(data_dir, 'test_cases.json')
    else:
        data_file = os.path.join(data_dir, 'parsed_cases.json')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    if not os.path.exists(data_file):
        print(f"‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª {data_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        sys.exit(1)

    print(f"üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    print(f"üìÅ –§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö: {data_file}")

    try:
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î
        vectorstore = EoraVectorStore(api_key)

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ –∑–∞–≥—Ä—É–∑–∫–∏
        stats_before = vectorstore.get_stats()
        print(
            f"üìä –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞–Ω–∫–æ–≤ –≤ –ë–î: {stats_before['total_chunks']}")

        # –û—á–∏—â–∞–µ–º –±–∞–∑—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if args.reset:
            print("üóëÔ∏è  –û—á–∏—â–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
            vectorstore.reset_collection()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞
        if not args.reset and stats_before['total_chunks'] > 0:
            if not args.yes:
                response = input(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç {stats_before['total_chunks']} —á–∞–Ω–∫–æ–≤. "
                                 "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É? (y/N): ")
                if response.lower() not in ['y', 'yes', '–¥–∞']:
                    print("‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
                    sys.exit(0)
            else:
                print("‚úÖ –§–ª–∞–≥ --yes —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        print(f"üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ {data_file}...")
        chunks_added = vectorstore.add_cases(data_file)

        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats_after = vectorstore.get_stats()

        print("\n" + "="*50)
        print("‚úÖ –ó–ê–ì–†–£–ó–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")
        print("="*50)
        print(f"üìä –î–æ–±–∞–≤–ª–µ–Ω–æ —á–∞–Ω–∫–æ–≤: {chunks_added}")
        print(f"üìä –í—Å–µ–≥–æ —á–∞–Ω–∫–æ–≤ –≤ –ë–î: {stats_after['total_chunks']}")
        print(f"üìä –ö–æ–ª–ª–µ–∫—Ü–∏—è: {stats_after['collection_name']}")
        print("="*50)

    except FileNotFoundError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω - {e}")
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
